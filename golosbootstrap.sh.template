#!/bin/bash

set -e
#set -x

GOLOS_REPO="https://github.com/GolosChain/golos"
MODE=build_and_install

# Build Options
BUILD_OPTIONS="-DCMAKE_BUILD_TYPE=Release"

# Parsing arguments
if [ ! -z $1 ]; then
	[ x"build_only" == x"$1" ] && MODE=build_only
fi

# ###################
# Checking system
# ###################

echo "* CHECKING SYSTEM"

# Only works on Ubuntu
OS=`cat /etc/lsb-release 2>/dev/null| grep DISTRIB_ID | cut -d'=' -f2 | tr '[:upper:]' '[:lower:]'`
if [[ "x$OS" != "xubuntu" ]]; then
	echo "ERROR: Unsupported OS"
	exit 1
fi

# Test Physical Memory
PHYMEM=$(free -g|awk '/^Mem:/{print $2}')
if (( PHYMEM < 2 )); then
	echo "ERROR: You have no enough Physical Memory (min: 2Gb)"
	exit 1
elif (( PHYMEM < 14 )); then
	echo "WARN: You have Physical Memory < 16Gb, will build LOW_MEMORY_NODE"
	BUILD_OPTIONS="$BUILD_OPTIONS -DLOW_MEMORY_NODE=ON -DCLEAR_VOTES=ON"
fi

# Get number of processors
CPUNUM=$(getconf _NPROCESSORS_ONLN)

BASEDIR=`mktemp -d`
trap 'rm -rf $BASEDIR' EXIT
pushd $BASEDIR >/dev/null

# Unpack contribute files
base64 -d <<CONTRIBEOF | tar xz
##CONTRIBBASE64##
CONTRIBEOF

##################################
# Preparing System
##################################


# Check if required packages are not installed
echo "** CHECKING REQUIRED PACKAGES FROM BUILDING"
PACKAGES_TO_INSTALL=""
for pkg in git cmake g++ python-dev autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev libssl-dev libncurses5-dev doxygen libreadline-dev dh-autoreconf build-essential; do
	PKG_OK=no
	dpkg-query -W --showformat='${Status}\n' $pkg | grep "install ok installed" > /dev/null && PKG_OK=yes
	echo " - Checking for $pkg: $PKG_OK"
	if [ x"no" == x"$PKG_OK" ]; then
		  PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $pkg"
	fi
done

# If found missed packages - install
if [ x"" != x"$PACKAGES_TO_INSTALL" ]; then
	sudo apt-get update >> $BASEDIR/log 2>&1 || : 
	sudo apt-get install -y $PACKAGES_TO_INSTALL >> $BASEDIR/log 2>&1
fi


# Upgrade system (not sure)
# apt-get -y upgrade

##################################
# Building Golosnode
##################################

echo "* BULDING GOLOS"

# Create folder for installing node
DEB_PATH=$BASEDIR/package/golos
GOLOS_PATH=$BASEDIR/package/golos/opt/golos
mkdir -p $DEB_PATH
mkdir -p $GOLOS_PATH

# Clone Golos
echo "** DOWNLOADING SOURCE CODE"
git clone $GOLOS_REPO >> $BASEDIR/log 2>&1
cd golos
git checkout master >> $BASEDIR/log 2>&1
git submodule update --init --recursive >> $BASEDIR/log 2>&1

# Build
echo "** COMPILING"
cmake $BUILD_OPTIONS . >> $BASEDIR/log 2>&1
make -j$CPUNUM >> $BASEDIR/log 2>&1

# Preparing golosnode package
echo "** PREPARING FILES FOR PACKAGING"
install -m 0755 programs/golosd/golosd $GOLOS_PATH/
install -m 0644 programs/golosd/snapshot5392323.json $GOLOS_PATH
install -m 0755 programs/cli_wallet/cli_wallet $GOLOS_PATH
cd ..

# Copying contrib files to package
mkdir $GOLOS_PATH/witness_node_data_dir
cp $BASEDIR/contrib/config.ini $GOLOS_PATH/witness_node_data_dir/config.ini
mkdir -p $DEB_PATH/lib/systemd/system
cp $BASEDIR/contrib/golosd.service $DEB_PATH/lib/systemd/system/
cp -r $BASEDIR/contrib/debian $DEB_PATH/DEBIAN

# Fixing package version
GOLOS_VERSION=$(cat $BASEDIR/golos/libraries/chain/include/steemit/chain/config.hpp | grep -m 1 STEEMIT_BLOCKCHAIN_VERSION | grep -oP '(\d+(, )?){3}' | sed 's/, /./g')
UNIXTIME=$(date +%s)
sed -i "s/##GOLOS_VERSION##/$GOLOS_VERSION/" $DEB_PATH/DEBIAN/control
sed -i "s/##UNIXTIME##/$UNIXTIME/" $DEB_PATH/DEBIAN/control

# Make deb package
echo "** PACKAGING"
fakeroot dpkg-deb --build $DEB_PATH >> $BASEDIR/log

mv $DEB_PATH/../golos.deb /tmp/golos-$GOLOS_VERSION-$UNIXTIME.deb

if [ x"$MODE" == x"build_and_install" ]; then
	echo "* INSTALLING"
	sudo dpkg -i /tmp/golos-$GOLOS_VERSION-$UNIXTIME.deb >> $BASEDIR/log
fi

echo "* DONE"
echo
echo "- DEB package path: /tmp/golos-${GOLOS_VERSION}-${UNIXTIME}.deb"
echo
echo "-- To run golosd use: systemctl start golosd"
echo "-- To check golosd use: systemctl status golosd"
echo "-- To stop golosd use: systemctl stop golosd"
echo "-- Golos path: /opt/golos"
echo 

popd > /dev/null # basedir

